ISP standard library CC Nathan Swann

Op functions for when you just need * as a lambda 
TODO allow operators to act as naked lambdas
(fn op-mul [x y] (* x y))
(fn op-add [x y] (+ x y))
(fn op-sub [x y] (- x y))
(fn op-max [x y] (| x y))
(fn op-min [x y] (& x y))


(fn op-str [x] (str x))
(fn op-castnum [x] (castnum x))

(fn op-left [x y] (only x))
(fn op-right [x y] (only y))

(fn prev [x] (prior op-left x))

Common wrappers arround functions to make them work over lists
(fn max [x] (reduce op-max 0 x))
(fn maxs [x] (scan op-max 0 x))
(fn min [x] (reduce op-min (first x) x))
(fn mins [x] (scan op-min 0 x))
(fn sum [x] (reduce op-add 0 x))
(fn sums [x] (scan op-add 0 x))
(fn sort [x] (call (only x) (rank x)))
