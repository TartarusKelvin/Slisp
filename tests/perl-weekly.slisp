(import "tests/unit.slisp")

===================================== Running Sum ========================================
(fn pw238-1 [x] (sums x))
(Test "Pearl Weekly 238-1 Running Sum case 1" pw238-1 [(only [1 2 3 4 5])] [1 3 6 10 15])
(Test "Pearl Weekly 238-1 Running Sum case 2" pw238-1 [(only [1 1 1 1 1])] [1 2 3 4 5])
(Test "Pearl Weekly 238-1 Running Sum case 3" pw238-1 [(only [0 -1 1 2])] [0 -1 0 2])

===================================== Same string ========================================
(fn pw239-1 [x y] [
    (set fstring (call join x))
    (set sstring (call join y))
    (min (= fstring sstring))])
(Test "Pearl Weekly 239-1 Same String case 1" pw239-1 [["ab" "c"] ["a" "bc"]] 1)
(Test "Pearl Weekly 239-1 Same String case 2" pw239-1 [["ab" "c"] ["ac" "b"]] 0)
(Test "Pearl Weekly 239-1 Same String case 3" pw239-1 [["ab" "cd" "e"] ["abcde"]] 1)

=================================== Consistent Strings ===================================
(fn pw239-2 [allowed strings] [
    ])
========================================= Unique Sum =====================================
(fn pw228-1a [inp acc] [
    (if (= 1 (len inp)) (+ acc (first inp))
        (if (min (set mask (- 1 (= (set tval (first inp)) (set tail (drop 1 inp)))))) 
            (self (* mask tail) (+ acc tval)) 
            (self (* mask tail) acc)))])
Taking advantage of case like ifs
(fn pw228-1b [inp acc] [
    (if (= 0 (len inp)) acc
        (= 1 (len inp)) (+ acc (first inp))
        (min (set mask (- 1 (= (set tval (first inp)) (set tail (drop 1 inp))))))
            (self (* mask tail) (+ acc tval))
        (self (* mask tail) acc))])
Using return / a more imperative style
(fn pw228-1c [inp acc] [
    (if (= 0 (len inp)) (return acc) [])
    (if (= 1 (len inp)) (return (+ acc (first inp))) [])
    (set tval (first inp))
    (set tail (drop 1 inp))
    (set mask (- 1 (= tval tail)))
    (self (* mask tail) (if (min mask) (+ acc tval) acc ))])
(Test "Pearl Weekly 228-1 Unique Sum case 1a" pw228-1a [[2 1 3 2] 0] 4)
(Test "Pearl Weekly 228-1 Unique Sum case 2a" pw228-1a [[1 1 1 1] 0] 0)
(Test "Pearl Weekly 228-1 Unique Sum case 3a" pw228-1a [[2 1 3 4] 0] 10)
(Test "Pearl Weekly 228-1 Unique Sum case 1b" pw228-1b [[2 1 3 2] 0] 4)
(Test "Pearl Weekly 228-1 Unique Sum case 2b" pw228-1b [[1 1 1 1] 0] 0)
(Test "Pearl Weekly 228-1 Unique Sum case 3b" pw228-1b [[2 1 3 4] 0] 10)
(Test "Pearl Weekly 228-1 Unique Sum case 1c" pw228-1c [[2 1 3 2] 0] 4)
(Test "Pearl Weekly 228-1 Unique Sum case 2c" pw228-1c [[1 1 1 1] 0] 0)
(Test "Pearl Weekly 228-1 Unique Sum case 3c" pw228-1c [[2 1 3 4] 0] 10)

=================================== Empty Array ========================================
Count the number of iterations required for the following to reduce to an empty Array:
`if the first element is the smallest in the array remove it otherwise move it to the back of the array`

(fn pw228-2 [inp n] [
    (if (= 0 (len inp)) (return n) [])
    (set v (first inp))
    (set m (min inp))
    (set inp (drop 1 inp))
    (if (= m v) [] (set inp (join inp (enlist v))))
    (self inp (+ n 1))])

(Test "Pearl Weekly 228-2 Empty Array case 1" pw228-2 [[3 4 2] 0] 5) 
(Test "Pearl Weekly 228-2 Empty Array case 2" pw228-2 [[1 2 3] 0] 3) 

================================== String shuffle =====================================

(fn pw226-1 [istring idxs] [(call (istring) (rank idxs))])
(Test "Pearl Weekly 226-1 String Shuffle case 1" pw226-1 ["lacelengh" [3 2 0 5 4 8 6 7 1]] "challenge") 
